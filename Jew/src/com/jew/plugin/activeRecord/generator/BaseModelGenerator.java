package com.jew.plugin.activeRecord.generator;

import java.io.File;
import java.util.List;

import com.jew.kit.FileKit;
import com.jew.kit.StrKit;
/**
 * BaseModelGenerator
 */
public class BaseModelGenerator {
	
	private String packageStr="package %s;%n%n";
	private String importStr = "import com.jew.plugin.activeRecord.Model;%n"
							 + "import com.jew.plugin.activeRecord.IBean;%n%n";
	private String commentStr = "/**%n"+
							    " * Generated by Jew, do not modify this file.%n" +
							    " */%n";
	private String classStr = "@SuppressWarnings(\"serial\")%n"
						+     "public abstract class %s<M extends %s<M>> extends Model<M> implements IBean {%n%n";
	
	private String setGetStr = "\tpublic void set%s(%s %s) {%n" +
									"\t\tset(\"%s\", %s);%n" +
								"\t}%n%n" +
									
								"\tpublic %s get%s() {%n"	+
								"\t\treturn get(\"%s\");%n" +
								"\t}%n";
	
	private JavaKeyword keyword = new JavaKeyword();
	
	private String baseModelPackage;
	private String baseModelOutputDir;
	public void setBaseModelPackage(String baseModelPackage) {
		if(baseModelPackage != null){			
			this.baseModelPackage = baseModelPackage;
		}
	}
	public void setBaseModelOutputDir(String baseModelOutputDir) {
		if(baseModelOutputDir != null)
		{
			this.baseModelOutputDir = baseModelOutputDir;
		}
	}
	
	public BaseModelGenerator(String baseModelPackage,String baseModelOutputDirs){
		if(StrKit.isBlank(baseModelPackage)){
			throw new IllegalArgumentException("baseModelPackage can not be blank" );
		}
		if(baseModelPackage.contains("/") || baseModelPackage.contains("\\")){
			throw new IllegalArgumentException("baseModelPackage error : no '\' or '//' allowed");
		}
		if(StrKit.isBlank(baseModelOutputDirs)){
			throw new IllegalArgumentException("baseModelOutputDirs can not be blank");
		}
		this.baseModelPackage = baseModelPackage;
		this.baseModelOutputDir = baseModelOutputDirs;
	}
	
	public void generate(List<TableMeta> tabMetaList){
		for(int i=0;i<tabMetaList.size();i++){
			genBaseModelContent(tabMetaList.get(i));
		}
		writeToFile(tabMetaList);
	}
	
	public void genBaseModelContent(TableMeta tabMeta){
		StringBuilder sb = new StringBuilder();
		buildpackageStr(sb);
		buildImportStr(sb);
		buildCommentStr(sb);
		buildClassStr(sb,tabMeta);
		TableMeta tm = tabMeta;
		List<ColumnMeta> cmList = tm.columnMetas;
		for(int j=0;j<cmList.size();j++){
			buildSetGetStr(sb,cmList.get(j));
		}
		sb.append("}\n");
		tm.baseModelContent = sb.toString();
	}
	
	/**
	 * 
	 * @param tabMetaList
	 */
	public void writeToFile(List<TableMeta> tabMetaList){
		for(TableMeta tm : tabMetaList){
			FileKit.writeFile(baseModelOutputDir, tm.baseModelName +".java",tm.baseModelContent,true);
		}
	}
	
	public void buildpackageStr(StringBuilder sb){
		sb.append(String.format(packageStr, baseModelPackage));
	}
	
	public void buildImportStr(StringBuilder sb){
		sb.append(String.format(importStr, ""));
	}
	
	public void buildCommentStr(StringBuilder sb){
		sb.append(String.format(commentStr,""));
	}
	
	public void buildClassStr(StringBuilder sb,TableMeta tm){
		sb.append(String.format(classStr, tm.baseModelName,tm.baseModelName));
	}
	
	public void buildSetGetStr(StringBuilder sb,ColumnMeta cm){
		// if the attrName is a key world add "_" to the end of the name
		String argName = keyword.isKeywords(cm.attrName) ? (cm.attrName +"_") : cm.attrName;
		sb.append(
				String.format(
						setGetStr, 
						StrKit.upperCaseFirstLetter(cm.attrName),cm.javaType,argName,cm.name,argName,
						cm.javaType , StrKit.upperCaseFirstLetter(cm.attrName),cm.name));
	}
	
	
}
